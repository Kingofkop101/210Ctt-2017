//1. Implement an unweighted, undirected graph structure in the programming language of your
choice. Implement the BFS or DFS traversal for this graph.//


#this is the whole graph for the unweighed
class   Graph:

    def __init__(self):
        self.name = {}
#vertices
    def addVert(self,addVert):
        if addVert not in self.name :
            self.name [addVert] = []
        else:
            pass
        

    def DeothFirstSORT(self, addVert):
        #these two are empty list. this will have all of the nodes that its vistited within it
        self.visited = []
        #this is where the nodes are stacked up once visited and at te end it will be pulled out.
        self.stack= []
        #this is the function that adds into the empty list 
        self.stack.append(addVert)

        while self.stack != []:#if stacks not empty then pop the stackint the u variable 
            u = self.stack.pop()
            if u not in self.visited:
                #if the tacks not empty
                self.visited.append(u)
                for addingEdge in self.name [u]:
                    self.stack.append(addingEdge)
                print('vertex will be search by DFS= ',addVert,'This is the Nodes that have been visted= ',self.visited)
                file = open("DFSORT","w")
                file.write(str(self.visited))
                file.close
        
        return self.visited

    def addingEdge(self,addVert,addingEdge):
        self.name [addVert].append(addingEdge)
        self.name [addingEdge].append(addVert)

    def Dictionairyempty(self):
        for key in self.name :
            print('This is the Vertex: ',key, '|','This is the Edges: ' ,self.name [key])

if __name__ == '__main__':
    
    w = Graph()
#this
    
    w.addVert('2')
    w.addVert('1')
    w.addVert('3')
    w.addVert('4')
    w.addingEdge('1','2')
    w.addingEdge('1','3')
    w.addingEdge('1','4')
    w.addingEdge('2','4')
    w.addingEdge('4','3')
    w.Dictionairyempty()
    w.DeothFirstSORT('1')
    w.DeothFirstSORT('2')
